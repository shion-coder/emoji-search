{"version":3,"sources":["redux/create-reducer.js","redux/dimensions/dimensions.reducer.js","redux/dimensions/dimensions.types.js","redux/theme/theme.reducer.js","redux/theme/theme.types.js","redux/search/search.reducer.js","redux/search/search.types.js","redux/emoji/emoji.utils.js","redux/emoji/emoji.reducer.js","redux/emoji/emoji.types.js","redux/root-reducer.js","redux/store.js","config/theme.jsx","components/header/header.styles.js","components/header/header.component.jsx","redux/search/search.selectors.js","components/search-input/search-input.styles.js","components/search-input/search-input.component.jsx","redux/search/search.actions.js","redux/emoji/emoji.actions.js","redux/emoji/emoji.selectors.js","components/emoji-results-row/emoji-results-row.styles.js","components/emoji-results-row/emoji-results-row.component.jsx","components/emoji-results/emoji-results.styles.js","components/emoji-results/emoji-results.component.jsx","containers/app/app.container.jsx","redux/dimensions/dimensions.actions.js","utils/styles/global-styles.js","config/root.jsx","index.jsx"],"names":["createReducer","initialState","reducer","state","type","payload","Object","prototype","hasOwnProperty","call","dimensionsReducer","width","window","innerWidth","height","innerHeight","themeReducer","color","searchReducer","input","filterEmoji","searchText","maxResults","emojiList","filter","emoji","title","toLowerCase","includes","keywords","slice","emojiReducer","persistConfig","storage","key","whitelist","combineReducers","dimensions","theme","search","rootReducer","persistReducer","enhancer","compose","applyMiddleware","store","createStore","persistor","persistStore","Theme","children","HeaderContainer","styled","div","Header","selectSearchInput","createSelector","SearchInputContainer","Container","Input","mapStateToProps","createStructuredSelector","searchInput","connect","onSearchChange","autoComplete","value","onChange","e","target","selectEmojiList","EmojiResultRowContainer","Image","img","Title","span","Info","memo","symbol","codePointHex","codePointAt","toString","src","className","data-clipboard-text","alt","EmojiResultsContainer","useEffect","clipboard","Clipboard","destroy","map","setDimensions","handleResize","debounce","addEventListener","removeEventListener","fadeIn","keyframes","GlobalStyles","createGlobalStyle","normalize","Root","StylesProvider","injectFirst","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9154e27d.chunk.js","sourcesContent":["export const createReducer = (initialState, reducer) => (state = initialState, { type, payload }) => {\n  return Object.prototype.hasOwnProperty.call(reducer, type)\n    ? typeof reducer[type] === 'function'\n      ? reducer[type](state, payload)\n      : reducer[type]\n    : state;\n};\n","import { createReducer } from 'redux/create-reducer';\n\nimport { SET_DIMENSIONS } from './dimensions.types';\n\n/* -------------------------------------------------------------------------- */\n\nconst initialState = {\n  width: window.innerWidth,\n  height: window.innerHeight,\n};\n\nconst reducer = {\n  [SET_DIMENSIONS]: (state, { width, height }) => ({ ...state, width, height }),\n};\n\nexport const dimensionsReducer = createReducer(initialState, reducer);\n","export const SET_DIMENSIONS = 'SET_DIMENSIONS';\n","import { createReducer } from 'redux/create-reducer';\n\nimport { TOGGLE_THEME } from './theme.types';\n\n/* -------------------------------------------------------------------------- */\n\nconst initialState = {\n  color: 'light',\n};\n\nconst reducer = {\n  [TOGGLE_THEME]: state => ({ ...state, color: state.color === 'light' ? 'dark' : 'light' }),\n};\n\nexport const themeReducer = createReducer(initialState, reducer);\n","export const TOGGLE_THEME = 'TOGGLE_THEME';\n","import { createReducer } from 'redux/create-reducer';\n\nimport { ON_SEARCH_CHANGE } from './search.types';\n\n/* -------------------------------------------------------------------------- */\n\nconst initialState = {\n  input: '',\n};\n\nconst reducer = {\n  [ON_SEARCH_CHANGE]: (state, payload) => ({ ...state, input: payload }),\n};\n\nexport const searchReducer = createReducer(initialState, reducer);\n","export const ON_SEARCH_CHANGE = 'ON_SEARCH_CHANGE';\n","import emojiList from 'utils/emoji-list.json';\n\n/* -------------------------------------------------------------------------- */\n\nexport const filterEmoji = (searchText, maxResults) =>\n  emojiList\n    .filter(emoji => {\n      if (emoji.title.toLowerCase().includes(searchText.toLowerCase())) {\n        return true;\n      }\n\n      if (emoji.keywords.includes(searchText)) {\n        return true;\n      }\n\n      return false;\n    })\n    .slice(0, maxResults);\n","import { createReducer } from 'redux/create-reducer';\n\nimport { FILTER_EMOJI } from './emoji.types';\nimport { filterEmoji } from './emoji.utils';\n\n/* -------------------------------------------------------------------------- */\n\nconst initialState = { emojiList: filterEmoji('', 20) };\n\nconst reducer = {\n  [FILTER_EMOJI]: (state, payload) => ({ ...state, emojiList: filterEmoji(payload, 20) }),\n};\n\nexport const emojiReducer = createReducer(initialState, reducer);\n","export const FILTER_EMOJI = 'FILTER_EMOJI';\n","import { combineReducers } from 'redux';\nimport { persistReducer } from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\n\nimport { dimensionsReducer } from 'redux/dimensions/dimensions.reducer';\nimport { themeReducer } from 'redux/theme/theme.reducer';\nimport { searchReducer } from 'redux/search/search.reducer';\nimport { emojiReducer } from 'redux/emoji/emoji.reducer';\n\n/* -------------------------------------------------------------------------- */\n\nconst persistConfig = {\n  storage,\n  key: 'root',\n  whitelist: ['theme'],\n};\n\nconst reducer = combineReducers({\n  dimensions: dimensionsReducer,\n  theme: themeReducer,\n  search: searchReducer,\n  emoji: emojiReducer,\n});\n\nexport const rootReducer = persistReducer(persistConfig, reducer);\n","import { createStore, applyMiddleware, compose } from 'redux';\n// import createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport { persistStore } from 'redux-persist';\n\nimport { rootReducer } from 'redux/root-reducer';\n// import { rootSaga } from 'redux/root-saga';\n\n/* -------------------------------------------------------------------------- */\n\n// Setup redux-saga middleware\n// const sagaMiddleware = createSagaMiddleware();\n\n// List of middlewares\nconst middlewares = [];\n\n// Setup Redux DevTools only in development mode\nconst enhancer =\n  process.env.NODE_ENV === 'development'\n    ? composeWithDevTools(applyMiddleware(...middlewares))\n    : compose(applyMiddleware(...middlewares));\n\nexport const store = createStore(rootReducer, enhancer);\n\nexport const persistor = persistStore(store);\n\n// Run Redux Saga\n// sagaMiddleware.run(rootSaga);\n","import React from 'react';\n\nimport { ThemeProvider } from 'styled-components';\n\n/* -------------------------------------------------------------------------- */\n\nconst theme = {};\n\nconst Theme = ({ children }) => <ThemeProvider theme={theme}>{children}</ThemeProvider>;\n\n/* -------------------------------------------------------------------------- */\n\nexport default Theme;\n","import styled from 'styled-components';\n\n/* -------------------------------------------------------------------------- */\n\nexport const HeaderContainer = styled.div`\n  padding: 15px;\n  position: relative;\n  font-weight: normal;\n  font-family: 'Open Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  font-size: 32px;\n  letter-spacing: 4px;\n  text-align: center;\n  color: #333;\n`;\n","import React from 'react';\n\nimport { HeaderContainer } from './header.styles';\n\n// ----------------------------------------------------------------------------------------- //\n\nconst Header = () => <HeaderContainer>Emoji Search</HeaderContainer>;\n\n/* -------------------------------------------------------------------------- */\n\nexport default Header;\n","import { createSelector } from 'reselect';\n\n/* -------------------------------------------------------------------------- */\n\nconst searchSelector = state => state.search;\n\nexport const selectSearchInput = createSelector([searchSelector], search => search.input);\n","import styled from 'styled-components';\n\n/* -------------------------------------------------------------------------- */\n\nexport const SearchInputContainer = styled.div`\n  border-bottom: 1px solid #ccc;\n`;\n\nexport const Container = styled.div`\n  margin: 0 10px 10px 10px;\n`;\n\nexport const Input = styled.input`\n  border-radius: 4px;\n  border: 1px solid #bbb;\n  box-sizing: border-box;\n  font-size: 18px;\n  padding: 10px 8px;\n  width: 100%;\n`;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectSearchInput } from 'redux/search/search.selectors';\nimport { onSearchChange } from 'redux/search/search.actions';\nimport { filterEmoji } from 'redux/emoji/emoji.actions';\n\nimport { SearchInputContainer, Container, Input } from './search-input.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  searchInput: selectSearchInput,\n});\n\nconst SearchInput = ({ searchInput, onSearchChange, filterEmoji }) => {\n  const onChange = e => {\n    const input = e.target.value;\n\n    onSearchChange(input);\n    filterEmoji(input);\n  };\n\n  return (\n    <SearchInputContainer>\n      <Container>\n        <Input type=\"text\" autoComplete=\"off\" value={searchInput} onChange={onChange} />\n      </Container>\n    </SearchInputContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nSearchInput.propTypes = {\n  searchInput: PropTypes.string,\n  onSearchChange: PropTypes.func,\n  filterEmoji: PropTypes.func,\n};\n\nexport default connect(mapStateToProps, { onSearchChange, filterEmoji })(SearchInput);\n","import { ON_SEARCH_CHANGE } from './search.types';\n\n/* -------------------------------------------------------------------------- */\n\nexport const onSearchChange = input => ({\n  type: ON_SEARCH_CHANGE,\n  payload: input,\n});\n","import { FILTER_EMOJI } from './emoji.types';\n\n/* -------------------------------------------------------------------------- */\n\nexport const filterEmoji = input => ({\n  type: FILTER_EMOJI,\n  payload: input,\n});\n","import { createSelector } from 'reselect';\n\n/* -------------------------------------------------------------------------- */\n\nconst emojiSelector = state => state.emoji;\n\nexport const selectEmojiList = createSelector([emojiSelector], emoji => emoji.emojiList);\n","import styled from 'styled-components';\n\n/* -------------------------------------------------------------------------- */\n\nexport const EmojiResultRowContainer = styled.div`\n  border-bottom: 1px solid #ccc;\n  padding: 10px;\n  height: 32px;\n  position: relative;\n  font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  cursor: pointer;\n\n  &:hover {\n    background-color: #eee;\n\n    span {\n      display: inline-block;\n    }\n  }\n`;\n\nexport const Image = styled.img`\n  width: 32px;\n  height: 32px;\n  padding-right: 10px;\n`;\n\nexport const Title = styled.span`\n  position: relative;\n  top: -8px;\n`;\n\nexport const Info = styled.span`\n  float: right;\n  position: relative;\n  top: 8px;\n  right: 10px;\n  color: #ccc;\n  display: none;\n`;\n","import React, { memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { EmojiResultRowContainer, Image, Title, Info } from './emoji-results-row.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst EmojiReultsRow = ({ title, symbol }) => {\n  const codePointHex = symbol.codePointAt(0).toString(16);\n  const src = `//cdn.jsdelivr.net/emojione/assets/png/${codePointHex}.png`;\n\n  return (\n    <EmojiResultRowContainer className=\"copy-to-clipboard\" data-clipboard-text={symbol}>\n      <Image alt={title} src={src} />\n      <Title className=\"title\">{title}</Title>\n      <Info className=\"info\">Click to copy emoji</Info>\n    </EmojiResultRowContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nEmojiReultsRow.propTypes = {\n  title: PropTypes.string,\n  symbol: PropTypes.string,\n};\n\nexport default memo(EmojiReultsRow);\n","import styled from 'styled-components';\n\n/* -------------------------------------------------------------------------- */\n\nexport const EmojiResultsContainer = styled.div``;\n","import React, { useEffect, memo } from 'react';\nimport PropTypes from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { createStructuredSelector } from 'reselect';\nimport { selectEmojiList } from 'redux/emoji/emoji.selectors';\n\nimport Clipboard from 'clipboard';\n\nimport EmojiResultsRow from 'components/emoji-results-row/emoji-results-row.component';\n\nimport { EmojiResultsContainer } from './emoji-results.styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst mapStateToProps = createStructuredSelector({\n  emojiList: selectEmojiList,\n});\n\nconst EmojiResults = ({ emojiList }) => {\n  useEffect(() => {\n    const clipboard = new Clipboard('.copy-to-clipboard');\n\n    return () => {\n      clipboard.destroy();\n    };\n  }, []);\n\n  return (\n    <EmojiResultsContainer>\n      {emojiList.map(emoji => (\n        <EmojiResultsRow key={emoji.title} title={emoji.title} symbol={emoji.symbol} />\n      ))}\n    </EmojiResultsContainer>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nEmojiResults.propTypes = {\n  emojiList: PropTypes.array,\n};\n\nexport default connect(mapStateToProps)(memo(EmojiResults));\n","import React, { useEffect } from 'react';\nimport { PropTypes } from 'prop-types';\n\nimport { connect } from 'react-redux';\nimport { setDimensions } from 'redux/dimensions/dimensions.actions';\n\nimport { debounce } from 'lodash-es';\n\nimport Header from 'components/header/header.component';\nimport SearchInput from 'components/search-input/search-input.component';\nimport EmojiResults from 'components/emoji-results/emoji-results.component';\n\n/* -------------------------------------------------------------------------- */\n\nconst App = ({ setDimensions }) => {\n  useEffect(() => {\n    const handleResize = debounce(() => {\n      setDimensions({\n        width: window.innerWidth,\n        height: window.innerHeight,\n      });\n    }, 1000);\n\n    window.addEventListener('resize', handleResize);\n\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [setDimensions]);\n\n  return (\n    <>\n      <Header />\n      <SearchInput />\n      <EmojiResults />\n    </>\n  );\n};\n\n/* -------------------------------------------------------------------------- */\n\nApp.propTypes = {\n  setDimensions: PropTypes.func,\n};\n\nexport default connect(null, { setDimensions })(App);\n","import { SET_DIMENSIONS } from './dimensions.types';\n\n/* -------------------------------------------------------------------------- */\n\nexport const setDimensions = dimensions => ({\n  type: SET_DIMENSIONS,\n  payload: dimensions,\n});\n","import { createGlobalStyle, keyframes } from 'styled-components';\nimport { normalize } from 'styled-normalize';\n\n/* -------------------------------------------------------------------------- */\n\nconst fadeIn = keyframes`\n  from {\n      opacity: 0;\n  }\n\n  to {\n      opacity: 1;\n  }\n`;\n\nexport const GlobalStyles = createGlobalStyle`\n  ${normalize}\n\n  html {\n    box-sizing: border-box;\n    scroll-behavior: smooth;\n    background: transparent;\n    margin: 0;\n    padding: 0;\n  }\n\n  body {\n    font-family: sans-serif;\n    animation: ${fadeIn} 1s ease;\n  }\n\n  a {\n    text-decoration: none;\n  }\n`;\n","import React from 'react';\n\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from 'redux/store';\n\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { StylesProvider } from '@material-ui/core/styles';\n\nimport Theme from 'config/theme';\n\nimport App from 'containers/app/app.container';\n\nimport { GlobalStyles } from 'utils/styles/global-styles';\n\n/* -------------------------------------------------------------------------- */\n\nconst Root = () => (\n  <Provider store={store}>\n    <PersistGate persistor={persistor}>\n      <Theme>\n        <GlobalStyles />\n\n        <Router>\n          <StylesProvider injectFirst>\n            <App />\n          </StylesProvider>\n        </Router>\n      </Theme>\n    </PersistGate>\n  </Provider>\n);\n\n/* -------------------------------------------------------------------------- */\n\nexport default Root;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Root from 'config/root';\n\n/* -------------------------------------------------------------------------- */\n\nReactDOM.render(<Root />, document.getElementById('root'));\n"],"sourceRoot":""}